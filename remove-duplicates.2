#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2466 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"csc151"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"split-data"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 8 #"practice"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"rand"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"practice"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 8 #"practice"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 4 #"test"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 8 #"practice"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 4 #"test"
0 0 24 3 8 #"))])))))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   rand-string"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters "
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   range, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;   Create a string out of a random number in range 0 (inclusive) "
 #"- range (exclusive)"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   rand-string, a numeric string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"rand-string-num"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   list-of-lists-of-rands"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   count, a non-negative integer"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;;   sub-count, a non-negative integer"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   range, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";;;   Create list of count lists out of sub-count random numeric str"
 #"ings in a range of 0 (inclusive) - range (exclusive)"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;   result, a list of lists of strings"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"list-of-lists-of-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 9 #"sub-count"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 5 #"to-go"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 6 #"so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 5 #"to-go"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 9 #"decrement"
0 0 24 3 1 #" "
0 0 14 3 5 #"to-go"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"list-of-rands"
0 0 24 3 1 #" "
0 0 14 3 9 #"sub-count"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 2 #") "
0 0 14 3 6 #"so-far"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   list-of-rands"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   count, a non-negative integer"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   range, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";;;   Create list of count random numeric strings in a range of 0 (i"
 #"nclusive) - range (exclusive)"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   result, a list of strings"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"list-of-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 5 #"to-go"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 6 #"so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 5 #"to-go"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 9 #"decrement"
0 0 24 3 1 #" "
0 0 14 3 5 #"to-go"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rand-string-num"
0 0 24 3 1 #" "
0 0 14 3 5 #"range"
0 0 24 3 2 #") "
0 0 14 3 6 #"so-far"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"utter-mess"
0 0 24 3 2 #" ("
0 0 14 3 22 #"list-of-lists-of-rands"
0 0 24 3 1 #" "
0 0 21 3 4 #"2000"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 4 #"2000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Procedure"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   filter-duplicates"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   lis, a list "
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;;   to remove lists from a list of list that have all of the same"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;   elements in the same order "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;   newlis, a list"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   [No additonal]   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;   - newlis will only contain elements of lis "
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;;   - no two elements of newlis should contain the same"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;; values in the same order"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"filter-duplicates"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 1 #" "
0 0 14 3 11 #"list-equal?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"sum-so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"cur"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 8 #"))])))))"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";more efficient with more duplicates"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"filter-duplicates2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 10 #"sum-so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"duplicate?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 3 #"cur"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"duplicate?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 10 #"sum-so-far"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 10 #"duplicate?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 14 3 10 #"sum-so-far"
0 0 24 3 8 #"))])))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";(define ls< (o (section string-ci<? <>) (section cadr <>))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(sort la"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";      #:key cadr string<?)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 131
(
 #";(equal? '(\"Moore\" \"Emily\" \"emoore\" \"4205\" \"MAT\" \"Emeritu"
 #"s\" \"CSC\")  '(\"Moore\" \"Tom\" \"tmoore\" \"0000\" \"Statistics\""
 #" \"Emeritus\" \"MAT\"))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   list->string2"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   lst, a list of strings"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;;  Append all elements of lst "
 #"together into one string with \302\247 as seperator"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   result, a strings"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"list->string2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"list->string3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"so-far"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 19 3 6 #"\" \302\247 \""
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 19 3 6 #"\" \302\247 \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   list-equal?"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   lst1, a list of strings"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   lst2, a list of strings"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;;  Compares lst1 and lst2 to see which one would be alphabetically"
 #" first"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   result, a boolean value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"list-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"string-ci>=?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"list->string3"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 13 #"list->string3"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   reformat-data"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;   lst, a list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;  Takes out the values at positions 3,6,9,12 in the lst and"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;;  swaps the values at index positions 1 and 2 "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   result, a list of list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"reformat-data"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 11 #"data-so-far"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 11 #"data-so-far"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"cur"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"kernel"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")  "
0 0 21 3 3 #"-60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 71
(
 #"                                                                    "
 #"  ("
) 0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #") "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"        ("
) 0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #")  "
0 0 21 3 1 #"'"
0 0 24 3 12 #"()))))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 11 #"data-so-far"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;;   reformat-data-to-id--dance-name"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;   lst, a list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;;  Takes out the values at all index positions in the lst"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;;  except those at index poistions 0, 2 ,15 "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   result, a list of list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"reformat-data-to-id--dance-name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 11 #"data-so-far"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 11 #"data-so-far"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"cur"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"kernel"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"cur"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 11 #"data-so-far"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;   dump-data"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;   lst, a list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;;  writes data from list into a file "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   result, a list of list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"dump-data"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-of-data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 12 #"file-exists?"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"out"
0 0 24 3 2 #" ("
0 0 14 3 16 #"open-output-file"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-of-data"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 17 #"close-output-port"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 12 #"inner-kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 12 #"inner-kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 7 #"))])))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"delete-file"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"dump-data"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-of-data"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;   get-all-true-dancibility"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   file, a file"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;   gets all danceability values in practice file"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   result, a list of list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"get-all-true-dancibility"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 2 #" ("
0 0 14 3 13 #"read-csv-file"
0 0 24 3 1 #" "
0 0 14 3 4 #"file"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 6 #"so-far"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"true-dancebility"
0 0 24 3 1 #" "
0 0 17 3 40 #";all dancebility values in practice file"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 24 #"get-all-true-dancibility"
0 0 24 3 1 #" "
0 0 19 3 79
(
 #"\"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates-reformated-p"
 #"ractice.csv\""
) 0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   dancebility"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   data, a list"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   weights, a vector"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;;   takes a lst and returns the sum after multipling the weights"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;;   by the values in positions 2 - 9 of the list and summing the"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   resulting values together"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   result, a number "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;;  lst must be in the form (id danceability acousticness energy"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;;  instrumentalness liveness loudness speechiness tempo valence)"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;  weights must be in the form of 8 elements each of a value betwe"
 #"en 0 and 1. "
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;;   if all elements in weights are 1 then dancebility will return"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;;   the sum of all the values in lst"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;;   result <= (apply + (cddr lst))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"dancebility"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;   get-practice-and-true-dance"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;   weights, a vector of vectors"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;;   puts predicted danceability and true danceability into a pair"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   result, a list of pairs"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";takes in a vector for weights"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"get-practice-and-true-dance"
0 0 17 3 99
(
 #";returns a list of pairs of the dancibility of a song based on the w"
 #"eights and the true dancibility"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 13 #"read-csv-file"
0 0 24 3 1 #" "
0 0 19 3 79
(
 #"\"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates-reformated-p"
 #"ractice.csv\""
) 0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"weightss"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 14 3 8 #"weightss"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 18 #"remaining-practice"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 14 #"remaining-true"
0 0 24 3 1 #" "
0 0 14 3 16 #"true-dancebility"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 18 #"remaining-practice"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 6 #"so-far"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 18 #"remaining-practice"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 14 #"remaining-true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"dancebility"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cddar"
0 0 24 3 1 #" "
0 0 14 3 18 #"remaining-practice"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"remaining-true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 6 #"so-far"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(define test-and-true-dance;no point so far"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";  (get-practice-and-true-dance"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";   weight))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"success-rater"
0 0 24 3 1 #" "
0 0 17 3 5 #";STUB"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 3 #"0.1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   increase-weight"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   amount, a non-negative number"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;   increases weights based on the amount using overflowing values"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   [no result]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"increase-weight"
0 0 17 3 63
#";increases weights based on the amount using overflowing values"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 9 #"increment"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 8 #")))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   test-weights-algorithm"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   amount, a non-negative number"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;;   increases weights based on the amount using overflowing values"
 #" (o (l-s = 1) (l-s apply +))"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   result, a list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"test-weights-algorithm"
0 0 17 3 91
(
 #";increases weights based on the amount using overflowing values (o ("
 #"l-s = 1) (l-s apply +))"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 12 #"limiter-last"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 17 #"limiter-second-to"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 11 #"best-so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"increase-weight"
0 0 24 3 1 #" "
0 0 14 3 6 #"amount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 33 #";           (display best-so-far)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 26 #";           (display \"  \")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 28 #";           (display weight)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 21 #";           (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 3 #" (("
0 0 14 3 1 #"o"
0 0 24 3 2 #" ("
0 0 14 3 3 #"r-s"
0 0 24 3 1 #" "
0 0 14 3 10 #"inbetween?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"l-s"
0 0 24 3 1 #" "
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 11 #"best-so-far"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"current-weight"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 3 #" (("
0 0 14 3 1 #"o"
0 0 24 3 2 #" ("
0 0 14 3 3 #"r-s"
0 0 24 3 1 #" "
0 0 14 3 10 #"inbetween?"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"l-s"
0 0 24 3 1 #" "
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 3 #")) "
0 0 14 3 14 #"current-weight"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 9 #"testdance"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-weight"
0 0 24 3 2 #" ("
0 0 14 3 16 #"average-inbounds"
0 0 24 3 2 #" ("
0 0 14 3 27 #"get-practice-and-true-dance"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-weight"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"testdance"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"best-so-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 9 #"testdance"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 11 #"best-so-far"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"kernel"
0 0 24 3 1 #" "
0 0 14 3 11 #"best-so-far"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";(define all-weights-.2steps ;all weights with .2 step differences t"
 #"hat sum up to 1"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";  (filter (o (l-s = 1) (l-s apply +))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";          (let ([last (- (vector-length weight) 1)])"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";            (let kernel ([so-far null])"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";              (cond [(> (vector-ref weight last) .8) "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                     so-far]"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                    [else"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";                     (kernel (cons (increase-weight .2) so-far))]))"
 #")))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";(define all-weights-.1steps ;all weights with .2 step differences t"
 #"hat sum up to 1"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";  (filter (o (l-s = 1) (l-s apply +))"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";          (let ([last (- (vector-length weight) 1)])"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";            (let kernel ([so-far null])"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";              (cond [(> (vector-ref weight last) .9) "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";                     so-far]"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                    [else"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";                     (kernel (cons (increase-weight .1) so-far))]))"
 #")))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   data-check-all-weights"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;   all-weights, a list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;;   finds the average distance from the true dancibility of given "
 #"weights"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;   result, a list of vectors "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"data-check-all-weights"
0 0 17 3 80
(
 #"; returns a list of weights and their average distance from the true"
 #" dancibility"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 11 #"all-weights"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"kernel"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"average-inbounds"
0 0 24 3 2 #" ("
0 0 14 3 27 #"get-practice-and-true-dance"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 14 3 6 #"so-far"
0 0 24 3 7 #"))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;   average-inbounds"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   lst, a list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;;   finds the average distance from the true dancibility of given "
 #"weights"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   result, a list "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"average-inbounds"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   inbetween?"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   testscore, "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   truescore,  "
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   result, a boolean"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"inbetween?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"testscore"
0 0 24 3 1 #" "
0 0 14 3 9 #"truescore"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 9 #"testscore"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"truescore"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.002"
0 0 24 3 4 #")) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 9 #"testscore"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"truescore"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.002"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure "
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;   distance"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Parameters"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   pair, a pair"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose "
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";;;   finds the difference between the predicted dancability and the"
 #" true danceability"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces "
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;   result, a number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"distance"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";(dump-data \"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates."
 #"csv\""
) 0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";           (filter-duplicates (cdr (read-csv-file \"C:/Users/Moriz/"
 #"Documents/GitHub/sas.com/2000data.csv\"))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";(dump-data \"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates-"
 #"reformated-to-id-dance-name.csv\""
) 0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #";           (reformat-data-to-id--dance-name (read-csv-file \"C:/Use"
 #"rs/Moriz/Documents/GitHub/sas.com/no-duplicates.csv\")))"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";(dump-data \"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates-"
 #"reformated.csv\""
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";           (reformat-data (read-csv-file \"C:/Users/Moriz/Documents"
 #"/GitHub/sas.com/no-duplicates.csv\")))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #";(define split (split-data (read-csv-file \"C:/Users/Moriz/Documents"
 #"/GitHub/sas.com/no-duplicates-reformated.csv\")))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";(dump-data \"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates-"
 #"reformated-practice.csv\""
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";           (car split))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";(dump-data \"C:/Users/Moriz/Documents/GitHub/sas.com/no-duplicates-"
 #"reformated-test.csv\""
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";           (cdr split))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(lambda (one two) (< (cadr one) (cadr two)))"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";(data-check-all-weights '((0 0.2 0 0 0 0 0.45 0.35))) best so far"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";(data-check-all-weights '((0 0.2 0 0 0 0 0.42 0.38)))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";(data-check-all-weights '((0 0.2 0 0 0 0 0.425 0.375)))"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";(data-check-all-weights '((0 0.21 0 0 0 0 0.4155 0.3745)))"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";(data-check-all-weights '((0 0.22 0 0 0 0 0.4155 0.3645)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;;   final-dancibility-algorithm"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   data, a list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;   Take data from a song from Spotify and calculate its dancibili"
 #"ty"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   dancibility, a number "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;  data must be in the form:"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;     Name"
0 0 17 3 2 #" ("
0 0 17 3 7 #"Spotify"
0 0 17 3 5 #")    "
0 0 17 3 4 #"Type"
0 0 17 3 11 #"      Range"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;     id"
0 0 17 3 16 #"                "
0 0 17 3 7 #"integer"
0 0 17 3 22 #"   0-INTEGER_MAX_VALUE"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;     acousticness"
0 0 17 3 6 #"      "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;     danceability"
0 0 17 3 6 #"      "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;     duration_ms"
0 0 17 3 7 #"       "
0 0 17 3 7 #"integer"
0 0 17 3 22 #"   1-INTEGER_MAX_VALUE"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;     energy"
0 0 17 3 12 #"            "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;     instrumentalness"
0 0 17 3 2 #"  "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;;     key"
0 0 17 3 15 #"               "
0 0 17 3 7 #"integer"
0 0 17 3 7 #"   0-11"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;     liveness"
0 0 17 3 10 #"          "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;     loudness"
0 0 17 3 10 #"          "
0 0 17 3 5 #"float"
0 0 17 3 5 #"     "
0 0 17 3 3 #"-60"
0 0 17 3 1 #" "
0 0 17 3 1 #"-"
0 0 17 3 2 #" 0"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;     mode"
0 0 17 3 14 #"              "
0 0 17 3 7 #"integer"
0 0 17 3 6 #"   0-1"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;     speechiness"
0 0 17 3 7 #"       "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;     tempo"
0 0 17 3 13 #"             "
0 0 17 3 5 #"float"
0 0 17 3 10 #"     0-200"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;     time_signature"
0 0 17 3 4 #"    "
0 0 17 3 7 #"integer"
0 0 17 3 6 #"   1-8"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;     valence"
0 0 17 3 11 #"           "
0 0 17 3 5 #"float"
0 0 17 3 8 #"     0-1"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;     target"
0 0 17 3 12 #"            "
0 0 17 3 7 #"integer"
0 0 17 3 6 #"   0-1"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;     song_title"
0 0 17 3 8 #"        "
0 0 17 3 6 #"string"
0 0 17 3 7 #"    n/A"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;     artist"
0 0 17 3 12 #"            "
0 0 17 3 6 #"string"
0 0 17 3 7 #"    n/A"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   0 <= dancibility <= 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"final-dancibility-algorithm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"weights"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.22"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.4155"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.3645"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"Data needs to be a list, given: \""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 11 #"vector-data"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"vector-data"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"vector-data"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"vector-data"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 9 #"))))]))))"
0           0
