#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 903 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"csc151"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 16 #"rackunit/text-ui"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;   procedure-name"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   parameters"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   purpose"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   product"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;   weighted"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   lst, a list"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   weights, a vector"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;;   takes a lst and returns the sum after multipling the weights"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;   by the values in the list and putting it together"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   result, a number "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.804"
0 0 24 3 1 #" "
0 0 21 3 7 #"0.00479"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.56"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.164"
0 0 24 3 1 #" "
0 0 21 3 19 #"0.11136666666666667"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.185"
0 0 24 3 1 #" "
0 0 21 3 19 #"0.42511499999999997"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.264"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.678"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.18"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.561"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.512"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.439"
0 0 24 3 1 #" "
0 0 21 3 19 #"0.19413333333333332"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0694"
0 0 24 3 1 #" "
0 0 21 3 18 #"0.8700199999999999"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.904"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.494"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.604"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.338"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.51"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0922"
0 0 24 3 1 #" "
0 0 21 3 19 #"0.25393333333333334"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0261"
0 0 24 3 1 #" "
0 0 21 3 7 #"0.43234"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.23"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.838"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0344"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.412"
0 0 24 3 1 #" "
0 0 21 3 8 #"0.000234"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.159"
0 0 24 3 1 #" "
0 0 21 3 19 #"0.11913333333333333"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.289"
0 0 24 3 1 #" "
0 0 21 3 7 #"0.37522"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.173"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.743"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.199"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.359"
0 0 24 3 1 #" "
0 0 21 3 7 #"0.00611"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.137"
0 0 24 3 1 #" "
0 0 21 3 7 #"0.17335"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0794"
0 0 24 3 1 #" "
0 0 21 3 8 #"0.800415"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.588"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.833"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0102"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.434"
0 0 24 3 1 #" "
0 0 21 3 6 #"0.0219"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.165"
0 0 24 3 1 #" "
0 0 21 3 19 #"0.14658333333333334"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.431"
0 0 24 3 1 #" "
0 0 21 3 7 #"0.75031"
0 0 24 3 1 #" "
0 0 21 3 5 #"0.286"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"one-weights"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"weighted"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 24 3 3 #" (["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 6 #"so-far"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 3 #"sum"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"kernel"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"so-far"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 9 #"))))]))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"weighted"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #") "
0 0 14 3 11 #"one-weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 35 #"\"weighted multiplies by 1 and sums\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   prediction-difference "
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   lst, a list"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   weights, a vector"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;   predicts the dancability of a song"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;   and return the difference"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   result, a non-negative number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"prediction-difference"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"weighted"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"prediction-difference"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #") "
0 0 14 3 11 #"one-weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 18 #"0.9102716666666666"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 35 #"\"weighted multiplies by 1 and sums\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"prediction-difference"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #") "
0 0 14 3 11 #"one-weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 17 #"3.051553333333333"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 35 #"\"weighted multiplies by 1 and sums\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;;   average-prediction-difference "
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   data, a list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   weights, a vector"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;   predicts the dancability of every song in data "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;   and returns the average difference"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   result, a non-negative number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 29 #"average-prediction-difference"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"section"
0 0 24 3 1 #" "
0 0 14 3 21 #"prediction-difference"
0 0 24 3 1 #" "
0 0 14 3 2 #"<>"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 2 #") "
0 0 14 3 4 #"data"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 29 #"average-prediction-difference"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 14 3 11 #"one-weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 18 #"1.6149423333333333"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 13 #"\"average off\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;   optimize-weights "
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;   weights, a list of vectors"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   data, a list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;;   applies all possible weights in weights to data"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;   and returnes the one which produces the least"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;   average difference"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   product"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-weights"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"optimize-weights"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 7 #"kernell"
0 0 24 3 3 #" (["
0 0 14 3 7 #"weights"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 14 #"optimum-weight"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 13 #"optimum-error"
0 0 24 3 2 #" ("
0 0 14 3 29 #"average-prediction-difference"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 14 #"optimum-weight"
0 0 24 3 1 #" "
0 0 14 3 13 #"optimum-error"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 29 #"average-prediction-difference"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 13 #"optimum-error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"kernell"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 2 #")("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 2 #") "
0 0 14 3 5 #"error"
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"kernell"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"weights"
0 0 24 3 2 #") "
0 0 14 3 14 #"optimum-weight"
0 0 24 3 1 #" "
0 0 14 3 13 #"optimum-error"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"              ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;   generate-weights"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   parameters"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   purpose"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   product"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   check-fails"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   weights"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;   deviance"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;   list"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   purpose"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   product"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;;  "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;; Postconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 6 #";;;   "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
